
#include <cstdio>
#include <iostream>
#include <fstream>

#include <Windows.h>

using namespace std; 

#define KEY(c) ( GetAsyncKeyState((int)(c)) & (SHORT)0x8000 )

#include "image_transfer.h"

// include this header file for computer vision functions
#include "vision.h"

#include "robot.h"

#include "vision_simulation.h"

#include "timer.h"

#include "my_functions.h"

extern robot_system S1;

int main()
{
	double x0, y0, theta0, max_speed, opponent_max_speed;
	int pw_l, pw_r, pw_laser, laser;
	double light, light_gradient, light_dir, image_noise;
	double width1, height1;
	int N_obs, n_robot;
	double x_obs[50], y_obs[50], size_obs[50];
	double D, Lx, Ly, Ax, Ay, alpha_max;
	double tc, tc0; // clock time
	int mode, level;
	int pw_l_o, pw_r_o, pw_laser_o, laser_o;
	
	// TODO: it might be better to put this model initialization
	// section in a separate function
	// Red   = r_ic, r_jc
	double r_ic, r_jc;
	i2byte R_label;

	// Green = g_ic, g_jc
	double g_ic, g_jc;
	i2byte G_label;

	// Yellow = y_ic, y_jc
	double y_ic, y_jc;
	i2byte Y_label;

	// Blue = b_ic, b_jc
	double b_ic, b_jc;
	i2byte B_label;

	// 2 Obstacles = obs1_ic, obs1_jc, obs2_ic, obs2_jc
	double obs1_ic, obs1_jc, obs2_ic, obs2_jc;

	// 2 Players plr1_ic, plr1_jc, plr2_ic, plr2_jc
	double plr1_ic, plr1_jc, plr2_ic, plr2_jc;

	int tvalue = 80;
	// note that the vision simulation library currently
	// assumes an image size of 640x480
	width1  = 640;
	height1 = 480;
	
	// number of obstacles
	N_obs  = 2;

	x_obs[1] = 270; // pixels
	y_obs[1] = 270; // pixels
	size_obs[1] = 1.0; // scale factor 1.0 = 100% (not implemented yet)	

	x_obs[2] = 135; // pixels
	y_obs[2] = 135; // pixels
	size_obs[2] = 1.0; // scale factor 1.0 = 100% (not implemented yet)	

	// set robot model parameters ////////
	
	D = 121.0; // distance between front wheels (pixels)
	
	// position of laser in local robot coordinates (pixels)
	// note for Lx, Ly we assume in local coord the robot
	// is pointing in the x direction		
	Lx = 31.0;
	Ly = 0.0;
	
	// position of robot axis of rotation halfway between wheels (pixels)
	// relative to the robot image center in local coordinates
	Ax = 37.0;
	Ay = 0.0;
	
	alpha_max = 3.14159/2; // max range of laser / gripper (rad)
	
	// number of robot (1 - no opponent, 2 - with opponent, 3 - not implemented yet)
	n_robot = 2;
	
	cout << "\npress space key to begin program.";
	pause();

	// you need to activate the regular vision library before 
	// activating the vision simulation library
	activate_vision();

	// note it's assumed that the robot points upware in its bmp file
	
	// however, Lx, Ly, Ax, Ay assume robot image has already been
	// rotated 90 deg so that the robot is pointing in the x-direction
	// -- ie when specifying these parameters assume the robot
	// is pointing in the x-direction.

	// note that the robot opponent is not currently implemented in 
	// the library, but it will be implemented soon.

	activate_simulation(width1,height1,x_obs,y_obs,size_obs,N_obs,
		"robot_A.bmp","robot_B.bmp","background.bmp","obstacle.bmp",D,Lx,Ly,
		Ax,Ay,alpha_max,n_robot);	

	// open an output file if needed for testing or plotting
//	ofstream fout("sim1.txt");
//	fout << scientific;
	
	// set simulation mode (level is currently not implemented)
	// mode = 0 - single player mode (manual opponent)
	// mode = 1 - two player mode, player #1
	// mode = 2 - two player mode, player #2	
	mode = 1;
	level = 1;
	set_simulation_mode(mode,level);	
	
	// set robot initial position (pixels) and angle (rad)
	x0 = 170;
	y0 = 350;
	theta0 = 0;
	set_robot_position(x0,y0,theta0);
	
	// set opponent initial position (pixels) and angle (rad)
//	x0 = 150;
//	y0 = 375;
//	theta0 = 3.14159/4;
//	set_opponent_position(x0,y0,theta0);

	// set initial inputs / on-line adjustable parameters /////////

	// inputs
	pw_l = 1500; // pulse width for left wheel servo (us)
	pw_r = 1500; // pulse width for right wheel servo (us)
	pw_laser = 1500; // pulse width for laser servo (us)
	laser = 0; // laser input (0 - off, 1 - fire)
	
	// paramaters
	max_speed = 100; // max wheel speed of robot (pixels/s)
	opponent_max_speed = 100; // max wheel speed of opponent (pixels/s)
	
	// lighting parameters (not currently implemented in the library)
	light = 1.0;
	light_gradient = 1.0;
	light_dir = 1.0;
	image_noise = 1.0;

	// set initial inputs
	set_inputs(pw_l,pw_r,pw_laser,laser,
		light,light_gradient,light_dir,image_noise,
		max_speed,opponent_max_speed);

	// NOTE: for two player mode you shouldn't set the opponent inputs 

	// opponent inputs
//	pw_l_o = 1300; // pulse width for left wheel servo (us)
//	pw_r_o = 1600; // pulse width for right wheel servo (us)
//	pw_laser_o = 1500; // pulse width for laser servo (us)
//	laser_o = 0; // laser input (0 - off, 1 - fire)

	// manually set opponent inputs for the simulation
	// -- good for testing your program
//	set_opponent_inputs(pw_l_o, pw_r_o, pw_laser_o, laser_o, 
//				opponent_max_speed);

	// regular vision program ////////////////////////////////
	
	// note that at this point you can write your vision program
	// exactly as before.
	
	// in addition, you can set the robot inputs to move it around
	// the image and fire the laser.
	//-----------------------

	image rgb, rgb0, a, b, label;
	int nlabels = 10;
	int height, width;


	// measure initial clock time
	tc0 = high_resolution_time();
	
	activate(a, b, rgb, rgb0, label, height1, width1);

	acquire_image_sim(rgb);

	image_prep(tvalue, rgb, rgb0, a, b);

	label_image(a, label, nlabels); // Labelling image for the finding the initial centroid

// finding the centroid of the lablled images. Please note this is just initial centroid checking
	centroids(a, rgb, label, nlabels, r_ic, r_jc, g_ic, g_jc, y_ic, y_jc, b_ic, b_jc,
		obs1_ic, obs1_jc, obs2_ic, obs2_jc, N_obs);


	//----------------------------------

	wait_for_player();

	// measure initial clock time
	tc0 = high_resolution_time(); 

	while(1) {
		
		// simulates the robots and acquires the image from simulation
		acquire_image_sim(rgb);

		tc = high_resolution_time() - tc0;

		//------------vision-----------------
		image_prep(tvalue, rgb, rgb0, a, b);
		label_image(a, label, nlabels);

		centroids(a, rgb, label, nlabels, r_ic, r_jc, g_ic, g_jc, y_ic, y_jc, b_ic, b_jc,
			obs1_ic, obs1_jc, obs2_ic, obs2_jc, N_obs);
		//-----------------------------------
		double  x1, y1, x2, y2, theta1, theta2;
		position_angle(r_ic, g_ic, b_ic, y_ic, r_jc, g_jc, b_jc, y_jc, x1, y1, x2, y2, theta1, theta2);

		double d_obs1_a, d_obs2_a, d_obs_a, theta_shoot_gap_abs, obs_ic, obs_jc;
		triangle_angles(x1, y1, x2, y2, obs1_ic, obs1_jc, obs2_ic, obs2_jc,
			d_obs1_a, d_obs2_a, d_obs_a, obs_ic, obs_jc, theta_shoot_gap_abs);

		double p1x, p1y, p2x, p2y, theta_gap, theta, distance_a_b;
		//--------------call for attack----------------------------------
		if ((d_obs_a < 200) && (theta_shoot_gap_abs > 140) && (theta_shoot_gap_abs < 220)) {

			obstacle_avoid(g_ic, g_jc, obs_ic, obs_jc, d_obs_a, theta1, y_ic, y_jc,
				p1x, p1y, p2x, p2y, pw_r, pw_l);
		}
		else {
			control_robot(g_ic, g_jc, x2, y2, theta1, theta_gap, theta,
				distance_a_b, pw_r, pw_l, laser);
		}
		//--------------end of attack sequence--------------------------


		
		// change the inputs to move the robot around
		// or change some additional parameters (lighting, etc.)
		
		// only the following inputs work so far
		// pw_l -- pulse width of left servo (us) (from 1000 to 2000)
		// pw_r -- pulse width of right servo (us) (from 1000 to 2000)
		// pw_laser -- pulse width of laser servo (us) (from 1000 to 2000)
		// -- 1000 -> -90 deg
		// -- 1500 -> 0 deg
		// -- 2000 -> 90 deg
		// laser -- (0 - laser off, 1 - fire laser for 3 s)
		// max_speed -- pixels/s for right and left wheels
		set_inputs(pw_l,pw_r,pw_laser,laser,
			light,light_gradient,light_dir,image_noise,
			max_speed,opponent_max_speed);

		// manually set opponent inputs for the simulation
		// -- good for testing your program
//		set_opponent_inputs(pw_l_o, pw_r_o, pw_laser_o, laser_o, 
//					opponent_max_speed);

		// NOTE: only one program can call view_image()
		view_rgb_image(rgb);

		// don't need to simulate too fast
		Sleep(10); // 100 fps max
	}

	// free the image memory before the program completes
	free_image(rgb);

	deactivate_vision();
	
	deactivate_simulation();	
	
	cout << "\ndone.\n";

	return 0;
}
